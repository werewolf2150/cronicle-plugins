#!/bin/bash
# -*- UTF-8 -*-
#
# üõ† install_speedtest.sh ‚Äî Cronicle Speedtest Plugin Installer
#
# üá´üá∑ Installe le plugin Speedtest pour Cronicle (compatible Alpine, Python 3.7+)
# üá¨üáß Installs Speedtest plugin into Cronicle (Alpine-compatible, Python 3.7+ required)

set -e  # üö® Stop execution on any error

### üîß Configuration variables / Variables de configuration
PLUGIN_NAME="speedtest"
PLUGIN_ROOT="/opt/cronicle/plugins/${PLUGIN_NAME}"
PYTHON_BIN="$(which python3)"
BASE_URL="https://raw.githubusercontent.com/werewolf2150/cronicle-plugins/master"

PLUGIN_FILE="speedtest.py"
MODULE_FILES=(
  "cronicle/__init__.py"
  "cronicle/plugin.py"
  "cronicle/error.py"
  "cronicle/api.py"
  "cronicle/hookmanager.py"
  "cronicle/job.py"
  "cronicle/event.py"
  "cronicle/utils.py"
)
SCHEDULE_FILES=(
  "schedule/install-speedtest.cronicle.json"
  "schedule/uninstall-speedtest.cronicle.json"
  "schedule/run-speedtest.cronicle.json"
)

### üßæ Intro / Introduction
echo ""
echo "üõ† Installation du plugin Speedtest pour Cronicle / Installing Speedtest plugin for Cronicle"
echo "üìÇ Dossier cible : $PLUGIN_ROOT"
echo ""

### üìÅ Create plugin folder / Cr√©ation du dossier du plugin
if [ ! -d "$PLUGIN_ROOT" ]; then
  echo "üìÅ Cr√©ation du dossier / Creating plugin folder..."
  mkdir -p "$PLUGIN_ROOT"
  echo "‚úÖ Dossier cr√©√© / Folder created"
else
  echo "üìÅ Dossier existant ‚Äî mise √† jour / Folder exists ‚Äî updating files"
fi

### üì• Download main plugin script / T√©l√©chargement du script principal
echo "üì• T√©l√©chargement du fichier principal / Downloading main script..."
curl -s -L -A "Mozilla/5.0" -o "${PLUGIN_ROOT}/${PLUGIN_FILE}" "${BASE_URL}/${PLUGIN_FILE}" || {
  echo "‚ùå √âchec t√©l√©chargement fichier principal / Failed to download plugin script"
  exit 1
}
chmod +x "${PLUGIN_ROOT}/${PLUGIN_FILE}"
echo "‚úÖ Script t√©l√©charg√© / Script downloaded and made executable"

### üì• Download Python module files / T√©l√©chargement des modules Python
for file in "${MODULE_FILES[@]}"; do
  DEST="${PLUGIN_ROOT}/${file}"
  URL="${BASE_URL}/${file}"
  mkdir -p "$(dirname "$DEST")"
  curl -s -L -A "Mozilla/5.0" -o "$DEST" "$URL" || {
    echo "‚ùå √âchec t√©l√©chargement : ${file} / Failed to download: ${file}"
    exit 1
  }
  echo "‚úÖ T√©l√©charg√© : ${file} / Downloaded"
done

### üì• Download schedule files / T√©l√©chargement des fichiers de t√¢ches Cronicle
echo ""
echo "üìÖ T√©l√©chargement des fichiers de t√¢che Cronicle / Downloading Cronicle schedule files"
for file in "${SCHEDULE_FILES[@]}"; do
  DEST="${PLUGIN_ROOT}/${file}"
  URL="${BASE_URL}/${file}"
  mkdir -p "$(dirname "$DEST")"
  curl -s -L -A "Mozilla/5.0" -o "$DEST" "$URL" || {
    echo "‚ùå √âchec t√©l√©chargement : ${file} / Failed to download: ${file}"
    exit 1
  }
  echo "‚úÖ T√©l√©charg√© : ${file} / Downloaded"
done

### ü©∫ Python version check / V√©rification version Python
echo ""
echo "üêç V√©rification de la version Python / Checking Python version..."
PY_MAJOR=$("$PYTHON_BIN" -c 'import sys; print(sys.version_info.major)')
PY_MINOR=$("$PYTHON_BIN" -c 'import sys; print(sys.version_info.minor)')

if [ "$PY_MAJOR" -lt 3 ] || { [ "$PY_MAJOR" -eq 3 ] && [ "$PY_MINOR" -lt 7 ]; }; then
  echo "‚ùå Python ${PY_MAJOR}.${PY_MINOR} trop ancien / Too old ‚Äî Python ‚â• 3.7 requis"
  exit 1
fi
echo "‚úÖ Version Python ${PY_MAJOR}.${PY_MINOR} OK"

### üì¶ Python modules check / V√©rification des modules requis
echo "üîé V√©rification des modules Python / Checking Python modules..."
if ! "$PYTHON_BIN" -c 'import json, http.client, urllib.parse' >/dev/null 2>&1; then
  echo "‚ùå Modules manquants : json, http.client, urllib.parse / Missing modules"
  exit 1
fi
echo "‚úÖ Modules requis pr√©sents / Required modules present"

### üì° Speedtest CLI check & install / V√©rification & installation du binaire Speedtest
echo "üì° V√©rification du binaire Speedtest / Checking Speedtest CLI..."
if ! command -v speedtest >/dev/null 2>&1; then
  echo "‚ö†Ô∏è Speedtest CLI absent ‚Äî t√©l√©chargement manuel / Not found ‚Äî downloading manually"
  curl -s -L -A "Mozilla/5.0" -o /usr/local/bin/speedtest https://install.speedtest.net/app/cli/ookla-speedtest-1.2.0-linux-x86_64 || {
    echo "‚ùå √âchec du t√©l√©chargement du binaire / Binary download failed"
    exit 1
  }
  chmod +x /usr/local/bin/speedtest
  echo "‚úÖ Binaire Speedtest install√© / Speedtest CLI installed"
else
  echo "‚úÖ Speedtest CLI d√©j√† pr√©sent / Already installed"
fi

### üßπ Fix outdated Python imports / Correction des imports obsol√®tes
echo ""
echo "ü©∫ Correction des imports Python / Fixing outdated Python imports..."
sed -i 's/from urlparse import/from urllib.parse import/' "${PLUGIN_ROOT}/cronicle/api.py"
sed -i 's/from httplib import/from http.client import/' "${PLUGIN_ROOT}/cronicle/api.py"
sed -i 's/from urlparse import/from urllib.parse import/' "${PLUGIN_ROOT}/cronicle/hookmanager.py"
sed -i 's/from httplib import/from http.client import/' "${PLUGIN_ROOT}/cronicle/hookmanager.py"
sed -i 's/from BaseHTTPServer import/from http.server import/' "${PLUGIN_ROOT}/cronicle/hookmanager.py"

### ‚úÖ Final confirmation / Confirmation finale
echo ""
echo "üéâ Plugin Speedtest install√© avec succ√®s / Speedtest plugin successfully installed"
echo "üìÇ Dossier : $PLUGIN_ROOT"
echo "‚öôÔ∏è Commande Cronicle : $PYTHON_BIN $PLUGIN_ROOT/$PLUGIN_FILE"
echo "üìÖ Fichiers de t√¢ches dans : $PLUGIN_ROOT/schedule/"
echo ""